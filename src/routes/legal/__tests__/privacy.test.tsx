import { describe, it, expect, vi } from 'vitest';
import { render, screen } from '@testing-library/react';
import userEvent from '@testing-library/user-event';
import PrivacyPolicy from '../privacy';

// Mock the Button component
vi.mock('@/components/ui', () => ({
  Button: ({ children, onClick, variant, className }: { 
    children: React.ReactNode, 
    onClick?: () => void, 
    variant?: string,
    className?: string
  }) => (
    <button 
      data-testid="button" 
      onClick={onClick} 
      data-variant={variant}
      className={className}
    >
      {children}
    </button>
  ),
}));

// Mock window.history.back
const mockHistoryBack = vi.fn();
Object.defineProperty(window.history, 'back', {
  configurable: true,
  value: mockHistoryBack,
});

describe('PrivacyPolicy Component', () => {
  beforeEach(() => {
    mockHistoryBack.mockClear();
  });

  it('renders the privacy policy title', () => {
    render(<PrivacyPolicy />);
    expect(screen.getByText('Privacy Policy')).toBeInTheDocument();
  });

  it('renders the disclaimer', () => {
    render(<PrivacyPolicy />);
    expect(screen.getByText(/This privacy policy was generated by AI and should be reviewed by a legal professional before use./)).toBeInTheDocument();
  });

  it('renders all policy sections', () => {
    render(<PrivacyPolicy />);
    
    // Check that all section headers are present
    expect(screen.getByText('1. Introduction')).toBeInTheDocument();
    expect(screen.getByText('2. Data We Collect')).toBeInTheDocument();
    expect(screen.getByText('3. How We Use Your Data')).toBeInTheDocument();
    expect(screen.getByText('4. Data Security')).toBeInTheDocument();
    expect(screen.getByText('5. Data Retention')).toBeInTheDocument();
    expect(screen.getByText('6. Your Legal Rights')).toBeInTheDocument();
    expect(screen.getByText('7. Changes to This Privacy Policy')).toBeInTheDocument();
    expect(screen.getByText('8. Contact Us')).toBeInTheDocument();
  });

  it('renders the "Go Back" button', () => {
    render(<PrivacyPolicy />);
    const backButton = screen.getByText('Go Back');
    expect(backButton).toBeInTheDocument();
  });

  it('calls window.history.back when the "Go Back" button is clicked', async () => {
    const user = userEvent.setup();
    render(<PrivacyPolicy />);
    
    const backButton = screen.getByText('Go Back');
    await user.click(backButton);
    
    expect(mockHistoryBack).toHaveBeenCalledTimes(1);
  });
});
