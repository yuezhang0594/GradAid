import { describe, it, expect, vi } from 'vitest';
import { render, screen } from '@testing-library/react';
import userEvent from '@testing-library/user-event';
import TermsOfService from '../tos';

// Mock the Button component
vi.mock('@/components/ui', () => ({
  Button: ({ children, onClick, variant, className }: { 
    children: React.ReactNode, 
    onClick?: () => void, 
    variant?: string,
    className?: string
  }) => (
    <button 
      data-testid="button" 
      onClick={onClick} 
      data-variant={variant}
      className={className}
    >
      {children}
    </button>
  ),
}));

// Mock window.history.back
const mockHistoryBack = vi.fn();
Object.defineProperty(window.history, 'back', {
  configurable: true,
  value: mockHistoryBack,
});

// Mock document.title
let originalTitle = document.title;
beforeEach(() => {
  originalTitle = document.title;
});

afterEach(() => {
  document.title = originalTitle;
});

describe('TermsOfService Component', () => {
  beforeEach(() => {
    mockHistoryBack.mockClear();
  });

  it('renders the terms of service title', () => {
    render(<TermsOfService />);
    expect(screen.getByText('Terms of Service')).toBeInTheDocument();
  });

  it('sets the document title on mount', () => {
    render(<TermsOfService />);
    expect(document.title).toBe('Terms of Service - GradAid');
  });

  it('renders all terms sections', () => {
    render(<TermsOfService />);
    
    // Check that all section headers are present
    expect(screen.getByText('1. Introduction')).toBeInTheDocument();
    expect(screen.getByText('2. Definitions')).toBeInTheDocument();
    expect(screen.getByText('3. Use of Service')).toBeInTheDocument();
    expect(screen.getByText('5. Privacy')).toBeInTheDocument();
    expect(screen.getByText('6. Changes to Terms')).toBeInTheDocument();
    expect(screen.getByText('7. Disclaimer')).toBeInTheDocument();
  });

  it('renders the disclaimer text', () => {
    render(<TermsOfService />);
    expect(screen.getByText(/Please note that these Terms of Service were generated by artificial intelligence/)).toBeInTheDocument();
  });

  it('renders the "Go Back" button', () => {
    render(<TermsOfService />);
    const backButton = screen.getByText('Go Back');
    expect(backButton).toBeInTheDocument();
  });

  it('calls window.history.back when the "Go Back" button is clicked', async () => {
    const user = userEvent.setup();
    render(<TermsOfService />);
    
    const backButton = screen.getByText('Go Back');
    await user.click(backButton);
    
    expect(mockHistoryBack).toHaveBeenCalledTimes(1);
  });
});
